{"remainingRequest":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\src\\components\\AddRepoMain.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\src\\components\\AddRepoMain.vue","mtime":1587983546361},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AddRepoMain.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <div v-if=\"loading\">\r\n      <br><br><br>\r\n      <b-spinner style=\"width: 3rem; height: 3rem;\" label=\"Large Spinner\"></b-spinner>\r\n    </div>\r\n    <div v-if=\"!loading\">\r\n      <div>\r\n        <b-jumbotron atyle=\"font-size:12px \" class=\"h-25 w-100 d-inline-block\" header=\"Add Repository\">\r\n        </b-jumbotron>\r\n      </div>\r\n      <form @submit=\"onSubmit\" @reset=\"onReset\" > \r\n        <div class=\"form-group\">\r\n          <label for=\"exampleFormControlSelect1\" style=\"float:left\">Pick Category</label>\r\n          <br><br>\r\n          <b-form-select v-model=\"form.selected\" :options=\"options\" class=\"w-25\" Style=\"float:left\" id=\"exampleFormControlSelect1\"></b-form-select>\r\n        </div>\r\n        <div v-if=\"form.selected=='Add New Category'\"> \r\n          <br><br>\r\n          <b-form-input class=\"w-25\" id=\"input-2\" v-model=\"form.Category\" required placeholder=\"Enter New Category\" @keydown.space.prevent></b-form-input>\r\n        </div>\r\n        <br><br>\r\n\r\n        <label for=\"exampleFormControlSelect1\" style=\"float:left\">Repository Name</label><br><br>\r\n        <b-form-input class=\"w-25 \" id=\"input-2\" v-model=\"form.Repository\" required placeholder=\"Enter Repository name\" @keydown.space.prevent></b-form-input>\r\n        <br>\r\n\r\n        <label for=\"exampleFormControlSelect1\" style=\"float:left\" >Privacy</label><br><br>\r\n        <b-form-radio-group v-model=\"form.privacy\" label=\"Inline radios (default)\" style=\"float:left\" required>\r\n          <b-form-radio  name=\"default\" value=true >Private</b-form-radio>\r\n          <b-form-radio  name=\"radio-inline\" value=false >Public</b-form-radio>\r\n        </b-form-radio-group>\r\n        <br><br>\r\n\r\n        <label for=\"exampleFormControlSelect1\" style=\"float:left\">Admin User</label><br><br>\r\n        <b-form-input class=\"w-25 \" id=\"input-2\" v-model=\"form.iNumber\" required placeholder=\"Enter i Number\" @keydown.space.prevent></b-form-input>\r\n        <br>\r\n        \r\n        <b-button style=\"float:left\" type=\"submit\" variant=\"primary\">Submit</b-button>\r\n        <b-button type=\"reset\" Style=\"float:left\" variant=\"danger\">Reset</b-button>\r\n      </form>\r\n    </div>\r\n  </div> \r\n</template>\r\n\r\n<script>\r\n  // import the Api page in order to use the api calls\r\n  import Api from '../api/api'\r\n  export default {\r\n    name: \"AddRepoMain\",\r\n    data(){\r\n      return {\r\n        // define and initialize the form elements to save \r\n        form: {\r\n          Repository  : '',     // name of the Repository without the category\r\n          Category    : '',     // final category name  \r\n          iNumber     : '',     // define the admin user\r\n          selected    : null,   // define the category (with add category options) \r\n          privacy     : false,  // define if the repo is private (true) or public (false)\r\n          Repo        : '',     // final repository name (category-repository)\r\n        },\r\n        // define the category options (with the option of adding a new category)\r\n        options: [\r\n          { value: null, text: 'Please select some item' , disabled:true},\r\n          \"Add New Category\",\r\n        ],\r\n        // variable that will contain all the repositories\r\n        getRepos: \"\",\r\n        // variable that splits the repositories data into categories and makes the data more clean\r\n        category: [{}],\r\n        // variable that is used during the loading phase \r\n        loading: false\r\n      }\r\n    },\r\n    // used to get the organization name\r\n    computed: {\r\n      organization(){\r\n        return this.$store.state.organization;\r\n      }\r\n    },\r\n    async created(){\r\n      // the variable is set to true until the API call is not finished \r\n      this.loading = true\r\n      // url to request generic data about the organization data\r\n      var url = `https://github.wdf.sap.corp/api/v3/orgs/${this.organization}/repos?per_page=100`;\r\n      // call to the method to retrive data and wait for the data to come back\r\n      this.getRepos = await Api.getData(url);\r\n\r\n      // divide the repos in category ('*' means all the categories)\r\n      this.category = await Api.getCategory(this.getRepos,'*',\"0\");\r\n\r\n      // add all the categories name to the options\r\n      for(let i = 0; i < this.category.length; i++){\r\n        this.options.push(this.category[i].name);\r\n      }\r\n\r\n      // finishing the loading phase\r\n      this.loading = false;\r\n    },\r\n    methods: {\r\n      async onSubmit(evt) {\r\n        // prevent from submit \r\n        evt.preventDefault();\r\n        // be sure of the selected category\r\n        if(this.form.selected){\r\n          // variable to make sure the new category and repository does not exist\r\n          var found = false;\r\n          // varaible to get the index of the category\r\n          var index = -1;\r\n          // if the category is in the array (it is not new)\r\n          if(this.form.selected !== \"Add New Category\")\r\n          {\r\n            this.form.Category = this.form.selected;\r\n            // use the method tto find already existing category\r\n            index = this.findRepo(this.form.Category);\r\n            // check if the repository name already exists\r\n            for(let i = 0; i < this.category[index].repo.length; i++){\r\n              // make sure that even if the format is not the same, the name is\r\n              if(this.category[index].repo[i].shortName.toUpperCase() == this.form.Repository.toUpperCase()){\r\n                // display error mesage using Sweetalert (swal) \r\n                found = true;\r\n                this.$swal({\r\n                  title           : \"Error\",\r\n                  text            : \"The Repository already exists. Please use another repository name\",\r\n                  icon            : \"error\",\r\n                  showCloseButton : true\r\n                });\r\n              }\r\n            }\r\n          }\r\n          else{\r\n            // if the category is new, make sure that the category is new... don't need to check for the repository name \r\n            index = this.findRepo(this.form.Category);\r\n            if(index !== -1){\r\n              found = true;\r\n              this.$swal({\r\n                title           : \"Error\",\r\n                text            : \"The Category already exists. Please use another category name\",\r\n                icon            : \"error\",\r\n                showCloseButton : true\r\n              });\r\n            }\r\n          }\r\n          // continue if no errors found\r\n          if(!found){\r\n            // \r\n            this.form.Repo = this.form.Category.charAt(0).toUpperCase() + this.form.Category.slice(1) + '-' + this.form.Repository;\r\n            // check if member is inside organiation \r\n            var membershipUrl = `https://github.wdf.sap.corp/api/v3/orgs/${this.organization}/members/${this.form.iNumber}`;\r\n            \r\n            try{ \r\n              // be sure that the admin is a memmber of the organization\r\n              await Api.getData(membershipUrl);\r\n              let createUrl = `https://github.wdf.sap.corp/api/v3/orgs/${this.organization}/repos`;\r\n              \r\n              try {\r\n                // create the repository and assign the \r\n                var success = await Api.postData(createUrl,this.form);\r\n                this.$swal({\r\n                  title             : \"Well Done\",\r\n                  icon              : \"success\",\r\n                  html              : `\r\n                                        <p>The operation was succesfull. You created ${this.form.Repo}</p>\r\n                                        <br>\r\n                                        <p> The ssh link is: \r\n                                        <code type=\"text\" ref=\"code\">${success.data.ssh_url}<code>\r\n                                        </p>\r\n                                      `,\r\n                  confirmButtonText : 'Copy ssh'\r\n                }).then((result) => {\r\n                  if (result.value) {\r\n                    Api.copySsh(success.data.ssh_url);\r\n                    this.$swal.fire(\r\n                      'Copied!',\r\n                      'The ssh path has been copied to the clipboard.',\r\n                      'success'\r\n                    )\r\n                  }\r\n                });\r\n                // add category and repository to the category array\r\n                // if the category doesn't exist add the category and the new repo \r\n                if (index == -1){\r\n                  let newCategory =  {\r\n                                      name :  this.form.Repo.split(\"-\")[0],\r\n                                      repo  : [{\r\n                                              longName  : this.form.Repo,\r\n                                              shortName : this.form.Repository\r\n                                              }]\r\n                                      }\r\n                  this.category.push(newCategory);\r\n                  this.options.push(newCategory.name);\r\n                }\r\n                // if the category exists add the new repo to the category\r\n                else {\r\n                  let newRepo = {longName : this.form.Repo,\r\n                                shortName : this.form.Repository\r\n                                }\r\n                  this.category[index].repo.push(newRepo);\r\n                }\r\n                // clear the form\r\n                this.clear();\r\n              }\r\n              catch(x){\r\n                console.log(x);\r\n                // display an error if an error occured in the mean time\r\n                this.$swal({\r\n                  title           : \"Error\",\r\n                  text            : \"There was an error in your API request\",\r\n                  icon            : \"error\",\r\n                  showCloseButton : true\r\n                });\r\n              }\r\n            }\r\n            catch (e){\r\n              this.$swal({\r\n                title           : \"Error\",\r\n                text            : \"The admin user is not a member of the organization\",\r\n                icon            : \"error\",\r\n                showCloseButton : true\r\n              });\r\n            }\r\n          }\r\n        }\r\n        else{\r\n          this.$swal({\r\n            title           : \"Error\",\r\n            text            : \"Please select a Category\",\r\n            icon            : \"error\",\r\n            showCloseButton : true\r\n          });\r\n          \r\n        }\r\n      },\r\n      // clear the form \r\n      onReset(evt) {\r\n        evt.preventDefault()\r\n        this.clear();\r\n      },\r\n      // method to clear the from \r\n      clear(){\r\n        // Reset our form values\r\n        this.form.Repository  = ''\r\n        this.form.Category    = ''\r\n        this.form.selected    = null\r\n        this.form.iNumber     = ''\r\n        this.form.Repo        = ''\r\n      },\r\n      // find the repo and return the index\r\n      findRepo(categoryName){\r\n        for(let i=0;i<this.category.length;i++){\r\n          if(this.category[i].name.toUpperCase() == categoryName.toUpperCase()){\r\n            return i;\r\n          }\r\n        }\r\n        // return -1 if the category does not exist \r\n        return -1;\r\n      }\r\n    }\r\n  }\r\n</script>"],"sourceRoot":"src/components"}]}
{"remainingRequest":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\src\\api\\api.js","dependencies":[{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\src\\api\\api.js","mtime":1588079532421},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/I515655/Desktop/GitKraken/MainProject-Project/src/api/api.js"],"names":["axios","store","category","foundMember","RepoName","RepoTopic","organization","state","getData","url","apiKey","githubApiKey","get","headers","then","response","data","copySsh","ssh","input","document","createElement","body","appendChild","value","focus","select","execCommand","style","display","getCategory","getRepos","text","members","i","length","name","split","addRepo","Object","keys","splice","contributors","id","nContributors","url2","getContributors","k","login","userUrl","getUser","push","topic","shortName","j","found","element","totalIssue","open_issues","totalMembers","cMembers","JSON","parse","stringify","repo","longName","openIssues","rMembers","tMembers","html_url","ssh_url","z","x","getDataZenhub","ZenhubApiKey","zenhubApiKey","postData","form","method","Repo","privacy","createRepo","iNumber"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { store }  from '../store.js'\r\nexport default{\r\n  category      : [{}], \r\n  foundMember   : false,\r\n  RepoName      : '',\r\n  RepoTopic     : '',\r\n  organization  : store.state.organization,\r\n  // method to retrieve data from the API and return the data\r\n  async getData(url) {\r\n    var apiKey = store.state.githubApiKey;\r\n    let data;\r\n    // axis retrieve data from the API\r\n    // the headers are defined in the GitHub API documentation\r\n    return axios.get(url, {\r\n      headers: {\r\n        \"Accept\"        : `application/vnd.github.nebula-preview+json`,\r\n        \"Authorization\" : `token ${apiKey}`\r\n      }\r\n    }).then(response => {\r\n      data = response.data;\r\n      return data;\r\n    });\r\n  },\r\n  copySsh(ssh){\r\n    // create a input in order to copy to clipboard and then delete it\r\n    const input = document.createElement('input');\r\n    document.body.appendChild(input);\r\n    input.value = ssh;\r\n    input.focus();\r\n    input.select();\r\n    document.execCommand('copy');\r\n    input.style.display = \"none\";\r\n  },\r\n  // if the text is '*' then I am looking for all the categories, otherwise that will be the name of the repository I am looking for  \r\n  async getCategory(getRepos,text,members){\r\n    this.category = [{}];\r\n    // split the repos into categories \r\n    for (var i = 0; i < getRepos.length; i++){\r\n      // split the name of the repository into category and name and assign them to a varaible  \r\n      this.RepoName  = getRepos[i].name;\r\n      this.RepoTopic = this.RepoName.split(\"-\")[0];\r\n      \r\n      if (text == '*'){\r\n        getRepos = await this.addRepo(getRepos,i,members);\r\n      }\r\n      else if(this.RepoTopic == text) {\r\n        getRepos = await this.addRepo(getRepos,i,members);\r\n      }\r\n       \r\n    }\r\n    // check if ifrst element is empty\r\n    if (Object.keys(this.category[0]).length === 0){\r\n      // delete the first element in the array (when we initialize we create an element inside the array that is empty)\r\n      this.category.splice(0,1);\r\n    }\r\n    return this.category;\r\n  },\r\n\r\n  // add each repo to the category \r\n  async addRepo(getRepos,i,members){\r\n    getRepos[i].contributors = [{\r\n      name  : \"\",\r\n      id    : \"\"\r\n    }];\r\n    getRepos[i].nContributors = 0;\r\n\r\n    if(members == \"*\"){\r\n      // get the repos contributors (local and anonymous)\r\n      let url2 = `https://github.wdf.sap.corp/api/v3/repos/${this.organization}/${this.RepoName}/contributors?anon=1`;\r\n      let getContributors = await this.getData(url2); \r\n      // check if there are contributors (there are two answers for the call one for unknown and one for registered)\r\n      if (getContributors.length > 0){\r\n        // get number of contributors for each repo\r\n        getRepos[i].nContributors = getContributors.length;\r\n        // loop through the contributors\r\n        for (let k = 0; k < getContributors.length; k++){\r\n          // since the array is not empty, we need to override the first element \r\n          if (k == 0){\r\n            // check if the login field is undefined for user that are unknown\r\n            if (typeof(getContributors[k].login) == `undefined`) {\r\n              getRepos[i].contributors[k].name = getContributors[k].name;\r\n            }\r\n            // get the id of the urer that is the contributor\r\n            else {\r\n              let userUrl = `https://github.wdf.sap.corp/api/v3/users/${getContributors[k].login}`;\r\n              let getUser = await this.getData(userUrl);\r\n              getRepos[i].contributors[k].id = getContributors[k].login;\r\n              getRepos[i].contributors[k].name = getUser.name;\r\n            }\r\n          } \r\n          // add all the other contributors to the array\r\n          else{\r\n            // again check if the user is known or unknown to the organization\r\n            if (typeof(getContributors[k].login) == `undefined`) {\r\n              getRepos[i].contributors.push({\r\n                name: getContributors[k].name,\r\n              })\r\n            }\r\n            else {\r\n              let userUrl = `https://github.wdf.sap.corp/api/v3/users/${getContributors[k].login}`;\r\n              let getUser = await this.getData(userUrl);\r\n              getRepos[i].contributors.push({\r\n                id: getContributors[k].login,\r\n                name : getUser.name\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // continue the Api request for more data\r\n    getRepos[i].topic = this.RepoTopic;\r\n    getRepos[i].shortName = this.RepoName.split(\"-\")[1];\r\n    // check the category array and split the repos into it\r\n    let j = 0;\r\n    let found = false;\r\n    // check if the category is already in the array\r\n    for (j = 0; j < this.category.length; j++){\r\n      if (this.RepoTopic == this.category[j].name){\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    // if the category is meet for the first time, create the category and add the element\r\n    if (found == false){\r\n      this.category.push({\r\n        name          : this.RepoTopic,\r\n        element       : 1,\r\n        totalIssue    : getRepos[i].open_issues,\r\n        totalMembers  : getRepos[i].nContributors, \r\n        cMembers      : JSON.parse(JSON.stringify(getRepos[i].contributors)), // take away the connection between the 2 elements\r\n        repo          : [{\r\n                          id          : getRepos[i].id,\r\n                          longName    : getRepos[i].name,\r\n                          shortName   : getRepos[i].shortName,\r\n                          openIssues  : getRepos[i].open_issues, // we need just the number of all issues\r\n                          rMembers    : JSON.parse(JSON.stringify(getRepos[i].contributors)), // take away the connection between the 2 arrays\r\n                          tMembers    : getRepos[i].nContributors,\r\n                          url         : getRepos[i].html_url,\r\n                          ssh         : getRepos[i].ssh_url\r\n        }]\r\n      });\r\n    }\r\n    // else add the repo inside the category\r\n    else{\r\n      this.category[j].element += 1; \r\n      this.category[j].totalIssue += getRepos[i].open_issues;\r\n      //add members from repo to category without repetition\r\n      for(var z = 0; z < getRepos[i].nContributors; z++){\r\n        // mock variable to search \r\n        this.foundMember = false;\r\n        // if the repo does not have a contributor, just skip it (double insurance one with nContributors and this with first element that is empty)\r\n        if (getRepos[i].contributors[z].name == \"\"){\r\n          continue;\r\n        }\r\n        // compare the each repo contributor with the category contributor/member \r\n        else{\r\n          for (var x = 0; x < this.category[j].cMembers.length; x++){\r\n            // if the contributor is already in the category list, change the mock variable\r\n            if (this.category[j].cMembers[x].name == getRepos[i].contributors[z].name ){\r\n              this.foundMember = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        // add the contributor if not in the list\r\n        if (this.foundMember == false){\r\n          this.category[j].totalMembers += 1;\r\n          this.category[j].cMembers.push({\r\n            name  : getRepos[i].contributors[z].name,\r\n            id    : getRepos[i].contributors[z].id\r\n          })\r\n          // delete the empty row in the array (make sure the array is updated)\r\n          if(this.category[j].cMembers[0].name == \"\"){\r\n            this.category[j].cMembers.splice(0,1);           \r\n          }\r\n        }\r\n      }\r\n      // add the repo to the category \r\n      this.category[j].repo.push({\r\n        id          : getRepos[i].id,\r\n        longName    : getRepos[i].name,\r\n        shortName   : getRepos[i].shortName,\r\n        openIssues  : getRepos[i].open_issues,\r\n        rMembers    : JSON.parse(JSON.stringify(getRepos[i].contributors)),\r\n        tMembers    : getRepos[i].nContributors,\r\n        url         : getRepos[i].html_url,\r\n        ssh         : getRepos[i].ssh_url\r\n      }); \r\n    }\r\n    return getRepos;\r\n  },\r\n  async getDataZenhub(url){\r\n    var ZenhubApiKey = store.state.zenhubApiKey;\r\n    let data;\r\n    // axis retrieve data from the API\r\n    // the headers are defined in the GitHub API documentation\r\n    return axios.get(url, {\r\n      headers: {\r\n        'X-Authentication-Token' : ZenhubApiKey\r\n      }\r\n    }).then(response => {\r\n      data = response.data;\r\n      return data;\r\n    });\r\n  },\r\n  // method to retrieve data from the API and return the data\r\n  async postData(url,form) {\r\n    var apiKey = store.state.githubApiKey;\r\n    // axis retrieve data from the API\r\n    try{\r\n      // the headers are defined in the GitHub API documentation\r\n      var createRepo = await axios({\r\n        method  : 'post',\r\n        url     : url,\r\n        headers : {\r\n          \"Accept\"        : `application/vnd.github.nebula-preview+json`,\r\n          \"Authorization\" : `token ${apiKey}`\r\n        },\r\n        data    : {\r\n          \"name\"          : form.Repo,\r\n          \"private\"       : form.privacy,\r\n          \"has_issues\"    : true,\r\n          \"has_projects\"  : true,\r\n          \"has_wiki\"      : true\r\n        }\r\n      });\r\n      await axios({\r\n        method   : 'put',\r\n        url      : `https://github.wdf.sap.corp/api/v3/repos/${store.state.organization}/${form.Repo}/collaborators/${form.iNumber}`,\r\n        headers  : {\r\n          \"Accept\"        : `application/vnd.github.nebula-preview+json`,\r\n          \"Authorization\" : `token ${apiKey}`\r\n        },\r\n        data: {\r\n          \"permission\" : 'admin'\r\n        }\r\n      });\r\n      await axios({\r\n        method  : 'post',\r\n        url     : `https://github.wdf.sap.corp/api/v3/repos/${store.state.organization}/${form.Repo}/labels`,\r\n        headers : {\r\n          \"Accept\"        : `application/vnd.github.nebula-preview+json`,\r\n          \"Authorization\" : `token ${apiKey}`\r\n        },\r\n        data: {\r\n          \"name\"         : 'high-issue',\r\n          \"description\"  : \"prioritize the issue\",\r\n          \"color\"        : \"CD3333\"\r\n        }\r\n      });\r\n    }\r\n    catch (e){\r\n      return e;\r\n    }\r\n    return createRepo;\r\n  },\r\n}"]}]}
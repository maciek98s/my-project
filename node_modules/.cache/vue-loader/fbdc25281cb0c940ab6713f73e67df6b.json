{"remainingRequest":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\src\\components\\CategoryMain.vue?vue&type=style&index=0&id=52ded5bc&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\src\\components\\CategoryMain.vue","mtime":1588079532426},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\I515655\\Desktop\\GitKraken\\MainProject-Project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi50YWJsZXsNCiAgdGV4dC1hbGlnbjpsZWZ0Ow0KfQ0K"},{"version":3,"sources":["CategoryMain.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyMA;AACA;AACA","file":"CategoryMain.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"CategoryMain\">\r\n    <div v-if=\"loading\">\r\n        <br><br><br>\r\n         <b-spinner style=\"width: 3rem; height: 3rem;\" label=\"Large Spinner\"></b-spinner>\r\n    </div>\r\n\r\n    <div v-if=\"!loading\"> \r\n      <b-jumbotron\r\n        fluid\r\n        bg-variant=\"dark\"\r\n        text-variant=\"white\"\r\n        header= \"Hyper Scalors\"\r\n        lead=\"Members:\"\r\n      >\r\n       <template v-slot:header>{{nameofCategory}}</template>\r\n        <div v-if=\"!!mainCategory\">\r\n          <div v-for=\"member in mainCategory.cMembers\" :key=\"member.id\" >\r\n            <p :id=\"member.name\" style=\"display:inline-block\">\r\n              {{member.id}}\r\n              <b-icon-person></b-icon-person>\r\n            </p>\r\n            <b-tooltip placement=\"right\" :target=\"member.name\" variant=\"info\">{{member.name}}</b-tooltip>\r\n          </div>\r\n        </div>\r\n\r\n        <p>\r\n          <b-badge>Repositories</b-badge>\r\n        </p>\r\n      </b-jumbotron>\r\n      \r\n\r\n      <div class=\"input-group md-form form-sm form-1 pl-0\">\r\n        <div class=\"input-group-prepend\">\r\n          <span class=\"input-group-text lighten-3\" id=\"basic-text1\">\r\n            <b-icon icon=\"search\"></b-icon>\r\n          </span>\r\n        </div>\r\n        <input class=\"form-control my-0 py-1\" type=\"text\" placeholder=\"Search for Repository\" aria-label=\"Search\" v-model=\"search\">\r\n      </div>\r\n      <br>\r\n\r\n      <b-card-group deck v-for=\"i in nloops\" :key=\"i\">\r\n\r\n        <b-card border-variant=\"dark\"  v-for=\"(c, index) in filteredList.slice((i-1)*3,(i-1)*3+3)\" :key=\"c.id\" style=\"max-width:30.7% ;margin-bottom: 20px\">\r\n\r\n          <template v-slot:header>\r\n            <h6 class=\"mb-0\">{{c.shortName}}</h6>\r\n          </template>\r\n\r\n          <b-card-text>\r\n            <div v-if=\"getBoard[index].pipelines\">\r\n              <table style=\"width:100%\">\r\n                <tr> \r\n                  <th class=\"table\"> Pipeline Name </th>\r\n                  <th> Number of Issues </th>\r\n                  <th> High </th>\r\n                </tr>\r\n                <tr v-for=\"x in getBoard[index].pipelines\" :key=\"x.name\">\r\n                  <td class=\"table\">{{x.name}}</td>\r\n                  <td>{{x.issues.length}}</td>\r\n                  <td> {{x.high}}</td>\r\n                </tr>\r\n                \r\n              </table>\r\n            </div>\r\n            <div v-else>\r\n              <p>no Zenhub for this repo</p> \r\n            </div>\r\n          </b-card-text>\r\n\r\n          <template v-slot:footer>\r\n            <b-button\r\n              :href=\"c.url\"\r\n              target=\"_blank\"\r\n              variant=\"secondary\"\r\n            >Repo</b-button>  <span></span>\r\n          \r\n            <b-button\r\n              href=\"https://github.wdf.sap.corp/SLV-Tools\"\r\n              target=\"_blank\"\r\n              variant=\"secondary\"\r\n            >Issues</b-button> <span></span>\r\n            \r\n            <b-button\r\n              @click=\"copySsh(c.ssh)\"\r\n              target=\"_blank\"\r\n              variant=\"secondary\"\r\n            >Copy SSH</b-button>\r\n          </template>\r\n        </b-card>\r\n      </b-card-group>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Api from '../api/api'\r\n\r\nexport default {\r\n  name: \"CategoryMain\",\r\n  data() {\r\n    return {\r\n      search: '',\r\n      mainCategory: [{}],\r\n      nameofCategory: this.$route.query.plan,\r\n      index: parseInt(this.$route.query.plan2),\r\n      getBoard: [],\r\n      nloops: 0,\r\n      loading: false\r\n    }\r\n  },\r\n  computed: {\r\n    organization(){\r\n      return this.$store.state.organization;\r\n    },\r\n    filteredList(){\r\n      return this.mainCategory.repo.filter(rep => {\r\n          return rep.shortName.toLowerCase().includes(this.search.toLowerCase())\r\n        })\r\n      }\r\n  },\r\n  methods: {\r\n    copySsh(ssh){\r\n      Api.copySsh(ssh);\r\n      this.$swal.fire({\r\n        title: 'Copied!',\r\n        text: 'The ssh path has been copied to the clipboard.',\r\n        icon: 'success',\r\n        timer: 1000\r\n        })\r\n    }\r\n  },\r\n  async mounted(){\r\n    this.loading = true\r\n    this.mainCategory = this.$route.params.category;\r\n    if (typeof(this.category) == 'undefined' || this.category === null){\r\n      // url to request generic data about the organization data\r\n      var url = `https://github.wdf.sap.corp/api/v3/orgs/${this.organization}/repos?per_page=100`;\r\n\r\n      // call to the method to retrive data and wait for the data to come back\r\n      this.getRepos = await Api.getData(url);\r\n\r\n      // divide the repos in category ('*' means all the categories)\r\n      this.mainCategory = (await Api.getCategory(this.getRepos,this.$route.query.plan,\"*\"))[0];\r\n    }\r\n    else {\r\n      this.mainCategory = this.mainCategory[this.index];\r\n    }\r\n\r\n    for (var i=0; i<this.mainCategory.repo.length; i++){\r\n      // url to request generic data about the organization data\r\n      var urlBoard = `https://zenhub.mo.sap.corp/p1/repositories/${this.mainCategory.repo[i].id}/board`;\r\n\r\n      // url to request all the high issues\r\n      var urlPriority = `https://github.wdf.sap.corp/api/v3/repos/${this.organization}/${this.mainCategory.repo[i].longName}/issues?labels=high issue`;\r\n\r\n      // url to request closed issues\r\n      var urlClosed = `https://github.wdf.sap.corp/api/v3/repos/${this.organization}/${this.mainCategory.repo[i].longName}/issues?state=closed`;\r\n\r\n      // call to the method to retrive data and wait for the data to come back\r\n      try{\r\n        this.getBoard.push(await Api.getDataZenhub(urlBoard));\r\n        // get closed issue and add it to the getBoard\r\n        this.getBoard[i].pipelines.push({name:'Closed',\r\n                                          issues: await Api.getData(urlClosed)});\r\n        // get issues raw data\r\n        var rawIssue = await Api.getData(urlPriority);\r\n        // look over each pipeline\r\n        for( var k=0; k<this.getBoard[i].pipelines.length; k++ ){\r\n          // variable to store each\r\n          var totalForPipeline = 0;\r\n          // initialize high to 0\r\n          this.getBoard[i].pipelines[k].high = 0;\r\n          // look for each error in pipeline \r\n          for( var z=0; z<this.getBoard[i].pipelines[k].issues.length; z++ ){\r\n            // look at the raw issue array \r\n            for(var j=0; j<rawIssue.length; j++ ){\r\n              if(rawIssue[j].number == this.getBoard[i].pipelines[k].issues[z].issue_number){\r\n                totalForPipeline++;\r\n              }\r\n            }\r\n            this.getBoard[i].pipelines[k].high = totalForPipeline;\r\n          }\r\n        }\r\n      }\r\n      catch (e){\r\n        this.getBoard.push('error');\r\n        this.loading = false;\r\n      }\r\n    }\r\n\r\n    this.nloops = parseInt(this.mainCategory.repo.length / 3) + 1;\r\n    this.loading = false;\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.table{\r\n  text-align:left;\r\n}\r\n</style>\r\n"]}]}